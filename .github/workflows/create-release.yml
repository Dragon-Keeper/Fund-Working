name: Create GitHub Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'V*.*.*'
      - 'v*.*'
      - 'V*.*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 确保有足够的权限创建和管理releases

    steps:
      - name: 输出工作流信息
        run: |
          echo "工作流触发成功！"
          echo "触发事件: ${{ github.event_name }}"
          echo "触发引用: ${{ github.ref }}"
          echo "仓库: ${{ github.repository }}"

      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 确保获取所有标签和历史记录

      - name: 获取仓库信息和标签列表
        run: |
          echo "=== 仓库信息 ==="
          git config --list
          echo "=== 可用标签列表 ==="
          git tag -l --sort=-v:refname
          echo "=== 当前分支和引用 ==="
          git branch -a
          git log --oneline -n 5

      - name: 提取版本号
        id: get_version
        run: |
          echo "提取版本号从引用: ${{ github.ref }}"
          VERSION=${GITHUB_REF#refs/tags/}
          echo "提取到的版本号: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 生成发布说明
        id: generate_notes
        run: |
          echo "开始生成发布说明..."
          echo "当前标签: ${{ steps.get_version.outputs.version }}"
          
          # 获取所有标签并按版本排序
          ALL_TAGS=$(git tag --sort=-v:refname | grep -E '^[vV][0-9]+\.[0-9]+(\.[0-9]+)?$' | tr '\n' ' ')
          echo "所有标签(按版本排序): $ALL_TAGS"
          
          # 获取当前标签在列表中的位置
          CURRENT_TAG="${{ steps.get_version.outputs.version }}"
          TAG_ARRAY=($ALL_TAGS)
          CURRENT_INDEX=-1
          for i in "${!TAG_ARRAY[@]}"; do
            if [[ "${TAG_ARRAY[$i]}" == "$CURRENT_TAG" ]]; then
              CURRENT_INDEX=$i
              break
            fi
          done
          
          # 尝试获取上一个标签
          PREVIOUS_TAG=""
          if [ $CURRENT_INDEX -ne -1 ] && [ $CURRENT_INDEX -lt $((${#TAG_ARRAY[@]} - 1)) ]; then
            PREVIOUS_TAG="${TAG_ARRAY[$((CURRENT_INDEX + 1))]}"
          fi
          
          # 生成发布说明
          if [ -n "$PREVIOUS_TAG" ] && git rev-parse "$PREVIOUS_TAG" >/dev/null 2>&1; then
            echo "找到上一个标签: $PREVIOUS_TAG"
            RELEASE_NOTES=$(git log --pretty=format:"- %s (%an)" "$PREVIOUS_TAG".."$CURRENT_TAG")
          else
            echo "未找到有效的上一个标签，将使用所有提交历史生成发布说明"
            RELEASE_NOTES=$(git log --pretty=format:"- %s (%an)" "$CURRENT_TAG")
          fi
          
          # 处理空的发布说明
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="- 暂无提交历史记录"
          else
            echo "成功生成发布说明，包含 $(echo "$RELEASE_NOTES" | grep -c "^") 条提交记录"
          fi
          
          # 输出发布说明
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 创建Release并上传资产
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            # ${{ steps.get_version.outputs.version }}

            ## 更新内容
            ${{ steps.generate_notes.outputs.release_notes }}

            ## 下载链接
            请下载下方附件使用本版本。
          draft: false
          prerelease: false
          files: |
            *.py
            *.md
            *.txt
            requirements.txt
            !.gitignore
          fail_on_unmatched_files: false

      - name: 工作流完成总结
        if: always()
        run: |
          echo "=== 工作流执行总结 ==="
          echo "触发引用: ${{ github.ref }}"
          echo "提取的版本号: ${{ steps.get_version.outputs.version }}"
          echo "工作流状态: ${{ job.status }}"
          echo "如果工作流失败，请检查日志并确认以下事项:"
          echo "1. 标签格式是否正确 (v*.*.* 或 V*.*.*)"
          echo "2. 确保使用git push --tags推送了标签"
          echo "3. 仓库是否具有正确的权限"
          echo "4. 要上传的文件是否存在"